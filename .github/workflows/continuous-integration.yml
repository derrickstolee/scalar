name: Scalar

on:
  push:
    branches: [ main, releases/* ]
  pull_request:
    branches: [ main, releases/* ]

jobs:
  validate_scalar:
    name: "CI"

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, windows-2019, macos-10.15]
        watchman: [false, true]

    env:
      BUILD_FRAGMENT: bin/Release/netcoreapp3.1

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Indicate full history so Nerdbank.GitVersioning works.

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.302

    - name: Install dependencies
      run: dotnet restore
      env:
        DOTNET_NOLOGO: 1

    - name: Build
      run: dotnet build --configuration Release --no-restore -p:UseAppHost=true # Force generation of executable on macOS.

    - name: Unit test
      run: dotnet test --no-restore

    - name: Setup platform (Linux)
      if: runner.os == 'Linux'
      run: echo "BUILD_PLATFORM=${{ runner.os }}" >>$GITHUB_ENV

    - name: Setup platform (Mac)
      if: runner.os == 'macOS'
      run: echo 'BUILD_PLATFORM=Mac' >>$GITHUB_ENV

    - name: Setup platform (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "BUILD_PLATFORM=${{ runner.os }}" >>$env:GITHUB_ENV
        echo 'BUILD_FILE_EXT=.exe' >>$env:GITHUB_ENV

    - name: Setup Git installer
      shell: bash
      run: |
        GIT_VERSION=$(grep '<GitPackageVersion>' Directory.Build.props | grep -Eo '[0-9.]+(-\w+)*')
        cd ../out
        dotnet new classlib -n Scalar.GitInstaller
        cd Scalar.GitInstaller
        cp ../../scalar/nuget.config .
        dotnet add Scalar.GitInstaller.csproj package "GitFor${BUILD_PLATFORM}.GVFS.Installer" --package-directory . --version "$GIT_VERSION"

    - name: Install Git (Linux)
      if: runner.os == 'Linux'
      run: |
        cd ../out/Scalar.GitInstaller
        sudo apt-get install -y $(find . -type f -name '*.deb')

    - name: Install Git (Mac)
      if: runner.os == 'macOS'
      run: |
        cd ../out/Scalar.GitInstaller
        sudo /usr/sbin/installer -pkg $(find . -type f -name '*.pkg') -target /

    - name: Install Git (Windows)
      if: runner.os == 'Windows'
      run: |
        Set-Location -Path ..\out\Scalar.GitInstaller
        Write-Host 'Uninstalling Git ...'
        foreach ($file in Get-ChildItem 'C:\Program Files\Git' -Recurse -File -Include 'unins*.exe') {
          & $file.Fullname /VERYSILENT /SUPPRESSMSGBOXES /NORESTART
          Wait-Process -Name $file.Basename
        }
        Remove-Item 'C:\Program Files\Git' -Recurse -Force
        Write-Host 'Installing GitForWindows ...'
        $files = Get-ChildItem . -Recurse -File -Include 'Git-*.vfs.*.exe'
        & $files[0].Fullname /DIR="C:\Program Files\Git" /NOICONS /COMPONENTS="ext,ext\shellhere,ext\guihere,assoc,assoc_sh" /GROUP="Git" /SP- /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /ALLOWDOWNGRADE=1 /LOG=install.log
        Wait-Process $files[0].Basename
        Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\GitForWindows'

    - name: Install Watchman (Linux)
      if: runner.os == 'Linux' && matrix.watchman
      run: |
        cd ..
        git clone https://github.com/facebook/watchman.git -b v4.9.0 --depth 1
        cd watchman
        ./autogen.sh
        GCC_VERSION=$(gcc -dumpversion | cut -d. -f1)
        if [ "$GCC_VERSION" -ge 7 ]; then CPPFLAGS="-Wno-error=format-truncation"; fi
        if [ "$GCC_VERSION" -ge 8 ]; then CPPFLAGS="$CPPFLAGS -Wno-error=class-memaccess"; fi
        export CPPFLAGS
        ./configure --without-python
        make
        sudo make install

    - name: Install Watchman (Mac)
      if: runner.os == 'macOS' && matrix.watchman
      run: brew install watchman

    - name: Install Watchman (Windows)
      if: runner.os == 'Windows' && matrix.watchman
      run: |
        Write-Host 'Downloading Watchman ...'
        $Uri = (Select-Xml -Path Directory.Build.props -XPath /Project/PropertyGroup/WatchmanPackageUrl).Node.'#text'
        Set-Location -Path ..
        Invoke-WebRequest -Uri $Uri -OutFile watchman.zip
        Expand-Archive watchman.zip
        Write-Host 'Installing Watchman ...'
        New-Item -Path 'C:\Program Files' -Name Watchman -ItemType Directory | Out-Null
        Copy-Item -Path 'watchman\watchman-*-windows\bin\*' -Destination 'C:\Program Files\Watchman'
        $ENV:PATH="$ENV:PATH;C:\Program Files\Watchman"
        & watchman --version
        echo "PATH=$ENV:PATH" >>$env:GITHUB_ENV

    - name: Functional test
      shell: bash
      run: |
        cd ../out
        Scalar.FunctionalTests/$BUILD_FRAGMENT/Scalar.FunctionalTests$BUILD_FILE_EXT --test-scalar-on-path --full-suite
