<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>
    <LayoutPath Condition="'$(LayoutPath)' == ''">$(ProjectOutPath)layout\$(Configuration)\</LayoutPath>
    <InstallerOutputPath Condition="'$(InstallerOutputPath)' == ''">$(ProjectOutPath)installer\$(Configuration)\</InstallerOutputPath>
    <DistributionOutputPath Condition="'$(DistributionOutputPath)' == ''">$(ProjectOutPath)dist\$(Configuration)\</DistributionOutputPath>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <ProjectReference ReferenceOutputAssembly="false" Private="false" />
  </ItemDefinitionGroup>

  <ItemGroup>
    <ProjectReference Include="..\Scalar\Scalar.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="GitForWindows.GVFS.Installer" />
    <PackageReference Include="Tools.InnoSetup" />
  </ItemGroup>

  <PropertyGroup>
    <BuildInstallerDependsOn>
      BuildInstallerPhase1;
      BuildInstallerPhase2;
      BuildInstallerPhase3;
    </BuildInstallerDependsOn>
  </PropertyGroup>

  <!-- Only create the installer when running on Windows -->
  <Target Name="BuildInstaller" AfterTargets="Publish" DependsOnTargets="$(BuildInstallerDependsOn)" Condition="'$(OSPlatform)' == 'windows'" >
  </Target>

  <Target Name="BuildInstallerPhase1" Condition="'$(OSPlatform)' == 'windows'" >
    <!-- Ensure all projects have been published with the correct runtime identifier and configuration -->
    <MSBuild Projects="@(ProjectReference)"
             Targets="Publish"
             Properties="
             Configuration=$(Configuration);
             RuntimeIdentifier=$(RuntimeIdentifier);"
             BuildInParallel="true" />

    <!-- Bring together all published binaries -->
    <PropertyGroup>
      <PublishPathFragment>bin\$(Configuration)\$(TargetFramework)\$(RuntimeIdentifier)\publish\</PublishPathFragment>
    </PropertyGroup>
    <ItemGroup>
      <_PublishFiles Include="$(RepoOutPath)%(ProjectReference.Filename)\$(PublishPathFragment)\**\*" />
    </ItemGroup>
    <Copy SourceFiles="@(_PublishFiles)"
          DestinationFolder="$(LayoutPath)\%(RecursiveDir)"
          SkipUnchangedFiles="true"
          OverwriteReadOnlyFiles="true"/>
  </Target>

  <Target Name="BuildInstallerPhase2" Condition="'$(OSPlatform)' == 'windows'" >
    <!-- Run the Inno setup tool to build the installer -->
    <Exec Command="$(PkgTools_InnoSetup)\tools\ISCC.exe /DLayoutPath=$(LayoutPath) /DScalarVersion=$(ScalarVersion) Setup.iss /O$(InstallerOutputPath)"/>
  </Target>

  <Target Name="BuildInstallerPhase3" Condition="'$(OSPlatform)' == 'windows'" >
    <!-- Build the distribution script -->
    <ItemGroup>
      <ScalarPackage Include="$(InstallerOutputPath)\*.exe" LinkBase="Scalar" />
      <GitPackage    Include="$(PkgGitForWindows_GVFS_Installer)\tools\*.exe" LinkBase="Git" />
    </ItemGroup>
    <Copy SourceFiles="@(ScalarPackage);@(GitPackage)"
          DestinationFolder="$(DistributionOutputPath)%(LinkBase)"
          SkipUnchangedFiles="true" />
    <PropertyGroup>
      <ScalarPackageFilename>%(ScalarPackage.Filename)%(ScalarPackage.Extension)</ScalarPackageFilename>
      <GitPackageFilename>%(GitPackage.Filename)%(GitPackage.Extension)</GitPackageFilename>
    </PropertyGroup>
    <ItemGroup>
      <ScriptTemplate Include="InstallScalar.template.bat" TargetPath="InstallScalar.bat"
                      Properties="##SCALAR_INSTALLER_EXE_PLACEHOLDER##=$(ScalarPackageFilename);
                                  ##GIT_INSTALLER_EXE_PLACEHOLDER##=$(GitPackageFilename);
                                  ##WATCHMAN_CI_URL_PLACEHOLDER##=$(WatchmanPackageUrl);" />
    </ItemGroup>
    <CompileTemplatedFile Template="@(ScriptTemplate)" OutputFile="$(DistributionOutputPath)\%(TargetPath)" />
  </Target>

</Project>
